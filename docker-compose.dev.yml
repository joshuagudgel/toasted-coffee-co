version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "${API_PORT}:8080"
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8080
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - DB_HOST=${DB_HOST}
    volumes:
      - ./backend:/app
      - /app/tmp
    depends_on:
      - postgres

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "${FRONTEND_PORT}:5173"
    environment:
      - VITE_API_URL=http://localhost:${API_PORT}
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules
    depends_on:
      - backend

  admin-frontend:
    build:
      context: ./admin-frontend
      dockerfile: Dockerfile.dev
    ports:
      - "${ADMIN_PORT}:5174"
    environment:
      - VITE_API_URL=http://localhost:${API_PORT}
    env_file:
      - ./admin-frontend/.env
    volumes:
      - ./admin-frontend:/app
      - /app/node_modules
    depends_on:
      - backend

volumes:
  postgres_data: